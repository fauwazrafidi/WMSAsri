@using Client.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider

@inherits LayoutComponentBase

@* Required *@
<MudThemeProvider Theme="@myCustomTheme" />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

@* <div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                <Authorized>
                    @if (context.User.Identity.IsAuthenticated)
                    {
                        var role = context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
                        <p>Welcome, @role @context.User.Identity.Name</p>
                        <button class="btn btn-danger" @onclick="Logout"> Logout </button>
                    }
                </Authorized>
                <NotAuthorized>
                    Welcome, Guest
                    <button class="btn btn-primary" @onclick="SignUp"> SignUp </button>
                    <button class="btn btn-primary" @onclick="Login"> Login </button>
                </NotAuthorized>
            </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div> *@

<MudLayout>

    <MudAppBar Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Edge="Edge.Start" Color="Color.Inherit" OnClick="@ToggleDrawer" />
        <span>WMS Asri</span>

        <MudSpacer />

        <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
            <Authorized>
                @if (context.User.Identity.IsAuthenticated)
                {
                    var role = context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
                    <p>Welcome, @role @context.User.Identity.Name</p>
                    <button class="btn btn-danger" @onclick="Logout"> Logout </button>
                }
            </Authorized>
            <NotAuthorized>
                Welcome, Guest
                <button class="btn btn-primary" @onclick="SignUp"> SignUp </button>
                <button class="btn btn-primary" @onclick="Login"> Login </button>
            </NotAuthorized>
        </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" Color="Color.Primary" Elevation="0" ClipMode="DrawerClipMode.Never">
        <NavMenu />
    </MudDrawer>

    <MudMainContent>
        @* <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
        <Authorized>
        @if (context.User.Identity.IsAuthenticated)
        {
        var role = context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
        <p>Welcome, @role @context.User.Identity.Name</p>
        <button class="btn btn-danger" @onclick="Logout"> Logout </button>
        }
        </Authorized>
        <NotAuthorized>
        Welcome, Guest
        <button class="btn btn-primary" @onclick="SignUp"> SignUp </button>
        <button class="btn btn-primary" @onclick="Login"> Login </button>
        </NotAuthorized>
        </Microsoft.AspNetCore.Components.Authorization.AuthorizeView> *@
        <article class="content px-4">
            @Body
        </article>
    </MudMainContent>

</MudLayout>



@code {
    // private async Task Logout()
    // {
    //     var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
    //     await customAuthStateProvider.UpdateAuthenticationState(null!);
    //     NavManager.NavigateTo("/login");
    // }

    // void SignUp()
    // {
    //     NavManager.NavigateTo("/register");
    // }
    // void Login()
    // {
    //     NavManager.NavigateTo("/login");
    // }

    private bool _drawerOpen = false;

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null!);
        NavManager.NavigateTo("/login");
    }

    void SignUp()
    {
        NavManager.NavigateTo("/register");
    }
    void Login()
    {
        NavManager.NavigateTo("/login");
    }

    // Define your custom theme
    private MudTheme myCustomTheme = new MudTheme()
        {
            PaletteLight = new PaletteLight()
            {
                Primary = "#7E6FFF",         // Custom Primary Color
                Secondary = "#FF4081",       // Pink Accent (complementary secondary color)
                Tertiary = "#00C853",        // Green Accent (custom tertiary color)
                Background = "#F4F4F9",      // Light Grey (background)
                Surface = "#FFFFFF",         // White (surface)
                AppbarBackground = "#5E56FF",// Slightly Darker Shade of Primary for AppBar
                TextPrimary = "#212121",     // Dark Grey for Text
                TextSecondary = "#757575",   // Lighter Grey for Secondary Text
                ActionDefault = "#E0E0E0",   // Light Grey for Default Actions (buttons, etc.)
                DrawerBackground = "#FFFFFF",// White for Drawer Background
                DrawerText = "#7E6FFF"       // Matching Drawer Text Color
            }
        };
}