@using Client.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider

@inherits LayoutComponentBase

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
                <Authorized>
                    @if (context.User.Identity.IsAuthenticated)
                    {
                        var role = context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
                        <div class="d-flex align-items-center">
                            <p class="mb-0">Welcome, @role @context.User.Identity.Name</p>
                            <MudButton Variant="Variant.Filled" Style="margin-left: 5px" StartIcon="@Icons.Material.Filled.Logout" Color="Color.Error" OnClick="Logout">Logout</MudButton>
                        </div>
                    }
                </Authorized>
                <NotAuthorized>
                    <div class="d-flex align-items-center">
                        <p class="mb-0">Welcome, Guest</p>
                        <MudButton Variant="Variant.Filled" Style="margin-left: 5px" StartIcon="@Icons.Material.Filled.AppRegistration" Color="Color.Primary" OnClick="SignUp">Sign Up</MudButton>
                        <MudButton Variant="Variant.Filled" Style="margin-left: 5px; margin" StartIcon="@Icons.Material.Filled.Login" Color="Color.Primary" OnClick="Login">Login</MudButton>
                    </div>
                </NotAuthorized>
            </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>


@code {

    private bool _drawerOpen = true;

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null!);
        NavManager.NavigateTo("/login");
    }

    void SignUp()
    {
        NavManager.NavigateTo("/register");
    }
    void Login()
    {
        NavManager.NavigateTo("/login");
    }

}