@inject ISnackbar Snackbar
@inject HttpClient httpClient

@using Client.Pages.Validation
@using SHARED.Models

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(isEdit ? Icons.Material.Filled.Edit : Icons.Material.Filled.AddBox)" Class="mr-3 mb-n1" />
            @((isEdit) ? "Edit Location" : "Add Location")
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="locations" Validation="@(modelValidator.ValidateValue)">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="name"
                                  For="@(() => name)"
                                  Immediate="true"
                                  Label="Name *" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="description"
                                  For="@(() => description)"
                                  Immediate="true"
                                  Label="Description *" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="@Color" Variant="Variant.Filled" OnClick="Submit">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private MudForm form;
    AddEditLocationValidator modelValidator = new();
    private string generalApi = SHARED.Helpers.Constants.GeneralApi;
    Location locations = new Location();

    string name = "";
    string description = "";
    private bool isEdit = false;

    [Inject] ISnackbar snackbarProvider { get; set; }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Location Location { get; set; }

    [Parameter]
    public string ContentText { get; set; }

    [Parameter]
    public string ButtonText { get; set; }

    [Parameter]
    public Color Color { get; set; }

    protected override void OnInitialized()
    {
        if (Location != null)
        {
            name = Location.Name;
            description = Location.Description;
            isEdit = true;
        }
    }

    private async Task Submit()
    {
        try
        {
            if (name == null || name == "")
            {
                snackbarProvider.Add($"Name is Required", Severity.Error);
                return;
            }
            else if (description == null || description == "")
            {
                snackbarProvider.Add($"Description is Required", Severity.Error);
                return;
            }

            var locationData = new Location
                {
                    // LocationId = Location.LocationId,
                    Name = name,
                    Description = description
                };

            HttpResponseMessage response;

            if (isEdit)
            {
                locationData.LocationId = Location.LocationId;
                string apiUrl = $"{generalApi}/Location/update";
                response = await httpClient.PutAsJsonAsync(apiUrl, locationData);
            }
            else
            {
                string apiUrl = $"{generalApi}/Location/add";
                response = await httpClient.PostAsJsonAsync(apiUrl, locationData);
            }

            if (response.IsSuccessStatusCode)
            {
                snackbarProvider.Add(isEdit ? "Location updated successfully." : "Location added successfully.", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                snackbarProvider.Add($"Failed to {(isEdit ? "update" : "add")} Location: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            snackbarProvider.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
